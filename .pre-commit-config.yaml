# Pre-commit hooks para mantener calidad del código
repos:
  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 24.4.2
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88, --target-version=py38]

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile, black, --multi-line, "3", --line-length, "88"]

  # Elimina imports no usados AUTOMÁTICAMENTE
  - repo: https://github.com/PyCQA/autoflake
    rev: v2.2.1
    hooks:
      - id: autoflake
        args:
          - --in-place
          - --remove-all-unused-imports
          - --ignore-init-module-imports
        exclude: (^tests?/|test_.*\.py$) # TODO: Ignorar archivos de test

  # Formateo de código
  - repo: https://github.com/psf/black
    rev: 24.4.2
    hooks:
      - id: black
        args: [--line-length=88, --target-version=py312]
        language_version: python3.13
        exclude: (^tests?/|test_.*\.py$) # TODO: Ignorar archivos de test

  # Ordenamiento de imports
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black]
        exclude: (^tests?/|test_.*\.py$) # TODO: Ignorar archivos de test

  # Linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args: [--max-line-length=150, --extend-ignore=E203]
        exclude: '(__init__\.py$|^src/apps/.*/migrations/|^tests?/)' # TODO: Añadido tests/ al exclude

  # Linting de código Python
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        additional_dependencies:
          - types-requests
          - types-ujson
          - types-aiofiles
        args:
          - --ignore-missing-imports
          - --explicit-package-bases
        exclude: (^src/apps/.*/migrations/|^tests?/) # TODO: Añadido tests/ al exclude

  # Seguridad
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
<<<<<<< HEAD
        args: ["-s", "B101", "-x", "test/,tests/,test_precommit.py,run_working_tests.py", "--format", "json"]
=======
        args: ["-s", "B101", "-x", "test/,tests/", "--format", "json"]
>>>>>>> 6ade253d2d17092a2431a2a5ec5d0496c0943e33
        exclude: |
          (?x)(
            ^tests/
            |^migrations/
            |^\.venv/
            |^src/apps/.*/migrations/
<<<<<<< HEAD
            |^test_precommit\.py$
            |^run_working_tests\.py$
=======
>>>>>>> 6ade253d2d17092a2431a2a5ec5d0496c0943e33
            |^generate_simple_coverage\.py$
            |^generate_sonar_reports\.py$
          )

  # 🧪 Ejecutar tests de módulos funcionales
  - repo: local
    hooks:
      - id: run-working-tests
        name: Run working tests (user_profile & albums)
        entry: python test_precommit.py
        language: system
        stages: [pre-commit]
        pass_filenames: false
        always_run: true  # Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Hooks generales
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: (^tests?/|test_.*\.py$) # TODO: Ignorar archivos de test
      - id: end-of-file-fixer
        exclude: (^tests?/|test_.*\.py$) # TODO: Ignorar archivos de test
      - id: check-yaml
      - id: check-added-large-files
      - id: check-json
      - id: check-merge-conflict
      - id: debug-statements
        exclude: (^tests?/|test_.*\.py$) # TODO: Ignorar archivos de test
