[tool:pytest]
# Configuración de pytest para SonarQube integration
python_files = test_*.py *_test.py *_tests.py
python_classes = Test*
python_functions = test_*

# Directorios de test
testpaths = test/

# Opciones por defecto
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --cov=src
    --cov-report=term-missing
    --cov-report=xml:test-reports/coverage.xml
    --cov-report=html:test-reports/htmlcov
    --cov-branch
    --cov-fail-under=80
    --junitxml=test-reports/pytest-results.xml

# Markers personalizados
markers =
    unit: Marca tests unitarios
    integration: Marca tests de integración
    api: Marca tests de API
    domain: Marca tests de dominio
    infrastructure: Marca tests de infraestructura
    use_cases: Marca tests de casos de uso
    slow: Marca tests que tardan mucho

# Filtros de warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning

# Variables de entorno para tests
env =
    DJANGO_SETTINGS_MODULE = config.settings.base
    TESTING = true

# Coverage configuración
[coverage:run]
source = src/
omit = 
    */migrations/*
    */tests/*
    */test_*
    */venv/*
    */env/*
    manage.py
    */settings/*
    */config/*
    */docs/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\(Protocol\):
    @(abc\.)?abstractmethod

# Para coverage XML (SonarQube)
[coverage:xml]
output = test-reports/coverage.xml

# Para coverage HTML
[coverage:html]
directory = test-reports/htmlcov
