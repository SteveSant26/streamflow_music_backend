"""
Comando de gesti√≥n para poblar la base de datos con g√©neros musicales predefinidos.
Este comando gestiona √∫nicamente los g√©neros locales del sistema, independientemente
de las categor√≠as de YouTube.
"""

import uuid

from django.conf import settings
from django.core.management.base import BaseCommand

from apps.genres.infrastructure.models import GenreModel


class Command(BaseCommand):
    help = "Pobla la base de datos con g√©neros musicales locales predefinidos"

    def add_arguments(self, parser):
        parser.add_argument(
            "--clear",
            action="store_true",
            help="Elimina todos los g√©neros existentes antes de crear nuevos",
        )
        parser.add_argument(
            "--update",
            action="store_true",
            help="Actualiza g√©neros existentes si ya existen",
        )
        parser.add_argument(
            "--show-stats",
            action="store_true",
            help="Muestra estad√≠sticas despu√©s de poblar",
        )

    def handle(self, *args, **options):
        if options["clear"]:
            self.stdout.write("Eliminando g√©neros existentes...")
            deleted_count = GenreModel.objects.all().count()
            GenreModel.objects.all().delete()
            self.stdout.write(
                self.style.SUCCESS(f"{deleted_count} g√©neros eliminados exitosamente.")
            )

        # Nota: Aunque el setting se llama YOUTUBE_MUSIC_GENRES por razones hist√≥ricas,
        # este comando ahora gestiona √∫nicamente g√©neros locales del sistema.
        # Solo usamos YouTube Category ID 10 (Music) para filtrar videos musicales,
        # pero la clasificaci√≥n de g√©neros es completamente independiente de YouTube.
        genres_config = settings.YOUTUBE_MUSIC_GENRES

        if not genres_config:
            self.stdout.write(
                self.style.ERROR(
                    "No se encontr√≥ configuraci√≥n de g√©neros musicales en settings."
                )
            )
            return

        created_count = 0
        updated_count = 0
        skipped_count = 0

        for genre_key, genre_data in genres_config.items():
            # Verificar que genre_data es un diccionario
            if not isinstance(genre_data, dict):
                self.stdout.write(
                    self.style.WARNING(
                        f"G√©nero {genre_key} no tiene formato v√°lido. Saltando..."
                    )
                )
                skipped_count += 1
                continue

            name = genre_data.get("name")
            keywords = genre_data.get("keywords", [])

            if not name:
                self.stdout.write(
                    self.style.WARNING(
                        f"G√©nero {genre_key} no tiene nombre. Saltando..."
                    )
                )
                skipped_count += 1
                continue

            # Verificar si el g√©nero ya existe
            existing_genre = GenreModel.objects.filter(name=name).first()

            if existing_genre:
                if options["update"]:
                    existing_genre.description = self._build_description(keywords)
                    # Mantener la popularidad existente
                    existing_genre.save()
                    self.stdout.write(f"‚úÖ Actualizado: {name}")
                    updated_count += 1
                else:
                    self.stdout.write(f"‚è≠Ô∏è  Ya existe: {name} (saltando)")
                    skipped_count += 1
                continue

            # Crear nuevo g√©nero
            _ = GenreModel.objects.create(
                id=uuid.uuid4(),
                name=name,
                description=self._build_description(keywords),
                popularity_score=0,
            )

            self.stdout.write(f"‚úÖ Creado: {name}")
            created_count += 1

        # Mostrar resumen
        self.stdout.write(
            self.style.SUCCESS(
                f"\n--- RESUMEN ---\n"
                f"‚úÖ G√©neros creados: {created_count}\n"
                f"üîÑ G√©neros actualizados: {updated_count}\n"
                f"‚è≠Ô∏è  G√©neros saltados: {skipped_count}\n"
                f"üìä Total procesados: {len(genres_config)}"
            )
        )

        # Mostrar estad√≠sticas si se solicita
        if options["show_stats"]:
            self._show_statistics()

    def _build_description(self, keywords):
        """Construye una descripci√≥n basada en las palabras clave del g√©nero"""
        description = "G√©nero musical del sistema local."
        if keywords and isinstance(keywords, list):
            keywords_str = ", ".join(keywords[:5])  # Limitar a 5 palabras clave
            description += f" Palabras clave: {keywords_str}."
        return description

    def _show_statistics(self):
        """Muestra estad√≠sticas de los g√©neros en la base de datos"""
        self.stdout.write("\n--- ESTAD√çSTICAS DE G√âNEROS ---")

        total_genres = GenreModel.objects.count()
        active_genres = GenreModel.objects.all().count()

        self.stdout.write(f"üìä Total de g√©neros: {total_genres}")
        self.stdout.write(f"‚úÖ G√©neros activos: {active_genres}")

        # Top 5 g√©neros m√°s populares
        popular_genres = GenreModel.objects.all().order_by("-popularity_score", "name")[
            :5
        ]

        if popular_genres:
            self.stdout.write("\nüî• Top 5 g√©neros m√°s populares:")
            for i, genre in enumerate(popular_genres, 1):
                self.stdout.write(
                    f"   {i}. {genre.name} (Popularidad: {genre.popularity_score})"
                )

        # Mostrar algunos g√©neros como muestra
        sample_genres = GenreModel.objects.all().order_by("name")[:10]
        if sample_genres:
            self.stdout.write("\nüéµ G√©neros disponibles (muestra):")
            for genre in sample_genres:
                # Extraer palabras clave de la descripci√≥n
                keywords_text = ""
                if genre.description and "Palabras clave:" in genre.description:
                    keywords_part = genre.description.split("Palabras clave:")[
                        1
                    ].strip()
                    keywords_text = f" - {keywords_part}"

                self.stdout.write(f"   ‚Ä¢ {genre.name}{keywords_text}")

        self.stdout.write("\nüí° Comandos √∫tiles:")
        self.stdout.write(
            "   python manage.py populate_genres --update  # Actualizar existentes"
        )
        self.stdout.write(
            "   python manage.py populate_genres --clear   # Limpiar y recrear"
        )
        self.stdout.write(
            "   # Los g√©neros son independientes de las categor√≠as de YouTube"
        )
